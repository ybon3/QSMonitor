/**
 * This class is generated by jOOQ
 */
package com.dtc.test.qsm.server.dao.orm.tables;


import com.dtc.test.qsm.server.dao.orm.Public;
import com.dtc.test.qsm.server.dao.orm.tables.records.ContactsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contacts extends TableImpl<ContactsRecord> {

    private static final long serialVersionUID = 856746337;

    /**
     * The reference instance of <code>PUBLIC.CONTACTS</code>
     */
    public static final Contacts CONTACTS = new Contacts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactsRecord> getRecordType() {
        return ContactsRecord.class;
    }

    /**
     * The column <code>PUBLIC.CONTACTS.NAME</code>.
     */
    public final TableField<ContactsRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

    /**
     * The column <code>PUBLIC.CONTACTS.EMAIL</code>.
     */
    public final TableField<ContactsRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

    /**
     * The column <code>PUBLIC.CONTACTS.PHONE</code>.
     */
    public final TableField<ContactsRecord, String> PHONE = createField("PHONE", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

    /**
     * Create a <code>PUBLIC.CONTACTS</code> table reference
     */
    public Contacts() {
        this("CONTACTS", null);
    }

    /**
     * Create an aliased <code>PUBLIC.CONTACTS</code> table reference
     */
    public Contacts(String alias) {
        this(alias, CONTACTS);
    }

    private Contacts(String alias, Table<ContactsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contacts(String alias, Table<ContactsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Contacts as(String alias) {
        return new Contacts(alias, this);
    }

    /**
     * Rename this table
     */
    public Contacts rename(String name) {
        return new Contacts(name, null);
    }
}
